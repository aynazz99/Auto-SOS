document.addEventListener('DOMContentLoaded', async () => {
  //
  // === üîß –°–¢–ò–õ–ò –ò –ü–ê–ù–ï–õ–¨ ===
  //
  const style = document.createElement('style');
  style.textContent = `
    #preloader {
      position: fixed; inset: 0;
      background: #0e0e0e;
      color: #fff;
      display: flex; flex-direction: column;
      justify-content: center; align-items: center;
      font-family: monospace;
      z-index: 9999;
    }
    .loader {
      width: 60px; height: 60px;
      border: 6px solid rgba(255,255,255,0.1);
      border-top-color: #00aaff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 8px;
    }
    @keyframes spin { to { transform: rotate(360deg); } }
    #debug-panel {
      width: 90%; max-width: 600px; margin-top: 10px;
      text-align: left; font-size: 0.85em;
      color: #ddd; background: rgba(255,255,255,0.08);
      border-radius: 10px; padding: 10px;
      max-height: 60vh; overflow-y: auto;
    }
    .log-entry { margin: 4px 0; }
    .ok { color: #00ff99; }
    .warn { color: #ffaa00; }
    .err { color: #ff5555; }
    .info { color: #00aaff; }
  `;
  document.head.appendChild(style);

  const preloader = document.createElement('div');
  preloader.id = 'preloader';
  preloader.innerHTML = `
    <div class="loader"></div>
    <div id="debug-panel"></div>
  `;
  document.body.appendChild(preloader);
  const debug = document.getElementById('debug-panel');

  //
  // === –£–¢–ò–õ–ò–¢–´ ===
  //
  const log = (msg, cls = 'info') => {
    const el = document.createElement('div');
    el.className = `log-entry ${cls}`;
    el.textContent = `[${new Date().toLocaleTimeString()}] ${msg}`;
    debug.appendChild(el);
    console.log(msg);
  };

  const waitFor = async (desc, checkFn, warnAfter = 5000) => {
    const start = Date.now();
    while (!checkFn()) {
      await new Promise(r => setTimeout(r, 100));
      if (Date.now() - start > warnAfter && Date.now() - start < warnAfter + 200) {
        log(`‚è≥ ${desc} –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è (${warnAfter / 1000}s)`, 'warn');
      }
    }
    log(`‚úÖ ${desc} –Ω–∞–π–¥–µ–Ω.`, 'ok');
  };

  //
  // === –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ ===
  //
  try {
    log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebApp...');

    await waitFor('window.Telegram', () => !!window.Telegram);
    await waitFor('Telegram.WebApp', () => !!Telegram.WebApp);
    Telegram.WebApp.ready();

    await waitFor('Telegram.WebApp.initDataUnsafe', () => !!Telegram.WebApp.initDataUnsafe);

    const tg = Telegram.WebApp;
    const unsafe = tg.initDataUnsafe || {};

    // === –í—ã–≤–æ–¥ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
    log('üì¶ RAW initData:', 'info');
    log(JSON.stringify(tg.initData || '(–ø—É—Å—Ç–æ)', null, 2), 'info');

    log('üì¶ RAW initDataUnsafe:', 'info');
    log(JSON.stringify(unsafe, null, 2), 'info');

    // === –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
    let contextType = '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
    if (unsafe.user) contextType = '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç';
    else if (unsafe.chat_type === 'group' || unsafe.chat?.type === 'group') contextType = '–≥—Ä—É–ø–ø–∞';
    else if (unsafe.chat_type === 'channel' || unsafe.chat?.type === 'channel') contextType = '–∫–∞–Ω–∞–ª';
    else if (unsafe.inline_query_id) contextType = 'inline';
    else if (unsafe.chat_instance) contextType = 'chat_instance';

    log(`üåê –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—É—Å–∫–∞: ${contextType}`, 'ok');

    const tgContext = unsafe.user || unsafe.chat;
    if (!tgContext?.id) {
      log('‚ö†Ô∏è –ù–µ—Ç user/chat ID. –í–µ—Ä–æ—è—Ç–Ω–æ, WebApp –æ—Ç–∫—Ä—ã—Ç –≤–Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞.', 'warn');
      return;
    }

    log(`üÜî Telegram ID: ${tgContext.id}`, 'ok');
    log(`üë§ –ò–º—è: ${tgContext.first_name || tgContext.title || '‚Äî'}`);

    // === Firebase ===
    log('üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...');
    const firebaseConfig = {
      apiKey: "AIzaSyDtpFytzqGoE8w1cK_uekt3nnNGN4vV2Y8",
      authDomain: "auto-sos-8446f.firebaseapp.com",
      projectId: "auto-sos-8446f",
      storageBucket: "auto-sos-8446f.firebasestorage.app",
      messagingSenderId: "326847407685",
      appId: "1:326847407685:web:bfc1434124e1feed3ce52c",
      measurementId: "G-0YL7B1NZT1"
    };
    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();
    log('‚úÖ Firebase –≥–æ—Ç–æ–≤.', 'ok');

    // === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
    log('üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
    const snapshot = await db.ref('users/' + tgContext.id).get();

    if (snapshot.exists()) {
      log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ' + JSON.stringify(snapshot.val()), 'ok');
      setTimeout(() => preloader.remove(), 1000);
      window.location.href = '../page1/page1.html';
    } else {
      log('‚ö†Ô∏è –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.', 'warn');
      setTimeout(() => preloader.remove(), 1000);
      document.getElementById('regPopup')?.classList.add('show');
    }

  } catch (e) {
    log('üí• –û—à–∏–±–∫–∞: ' + e.message, 'err');
    console.error(e);
  }
});












const carPlateInput = document.querySelector('.car-plate');

const cyrillicToLatin = {
  '–ê': 'A', '–í': 'B', '–°': 'C', '–ï': 'E',
  '–ö': 'K', '–ú': 'M', '–ù': 'H', '–û': 'O',
  '–†': 'P', '–¢': 'T', '–•': 'X'
};

carPlateInput.addEventListener('input', (e) => {
  let value = e.target.value.toUpperCase();

  // –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É
  value = value.replace(/[–ê–í–°–ï–ö–ú–ù–û–†–¢–•]/g, match => cyrillicToLatin[match]);

  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã)
  value = value.replace(/[^A-Z0-9]/g, '');

  let formatted = '';

  for (let i = 0; i < value.length; i++) {
    if (i === 0) {
      if (/[A-Z]/.test(value[i])) formatted += value[i];        // –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞
    } else if (i >= 1 && i <= 3) {
      if (/[0-9]/.test(value[i])) formatted += value[i];        // 3 —Ü–∏—Ñ—Ä—ã
    } else if (i >= 4 && i <= 5) {
      if (/[A-Z]/.test(value[i])) formatted += value[i];        // 2 –±—É–∫–≤—ã
    } else if (i >= 6 && i <= 8) {
      if (/[0-9]/.test(value[i])) formatted += value[i];        // 2-3 —Ü–∏—Ñ—Ä—ã (—Ä–µ–≥–∏–æ–Ω)
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
  let spaced = '';
  if (formatted.length > 0) spaced += formatted[0];                 // –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞
  if (formatted.length > 1) spaced += ' ' + formatted.substr(1, 3); // —Ç—Ä–∏ —Ü–∏—Ñ—Ä—ã
  if (formatted.length > 4) spaced += ' ' + formatted.substr(4, 2); // –¥–≤–µ –±—É–∫–≤—ã
  if (formatted.length > 6) spaced += ' | ' + formatted.substr(6, 3); // —Ä–µ–≥–∏–æ–Ω —á–µ—Ä–µ–∑ |

  e.target.value = spaced.trim();
});


const nameInput = document.querySelector('.person-name');

nameInput.addEventListener('input', (e) => {
    let value = e.target.value;

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    value = value.replace(/[^A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]/g, '');

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤
    value = value.substring(0, 25);

    // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π
    value = value.split(/[\s-]+/).map(word => {
        if (word.length === 0) return '';
        return word[0].toUpperCase() + word.slice(1);
    }).join(' ');

    e.target.value = value;
});


const phoneInput = document.querySelector('.phone');

phoneInput.addEventListener('input', (e) => {
    let digits = e.target.value.replace(/\D/g, ''); // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã

    // –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –∫ 8
    if (/^[0-9]/.test(digits)) {
        digits = '8' + digits.substr(1);
    }


    digits = digits.substring(0, 11); // –º–∞–∫—Å–∏–º—É–º 11 —Ü–∏—Ñ—Ä

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    let formatted = '';
    for (let i = 0; i < digits.length; i++) {
        if (i === 0) formatted += digits[i];
        else if (i === 1) formatted += ' (' + digits[i];
        else if (i === 2 || i === 3) formatted += digits[i];
        else if (i === 4) formatted += ') ' + digits[i];
        else if (i === 5 || i === 6) formatted += digits[i];
        else if (i === 7) formatted += ' ' + digits[i];
        else if (i === 8) formatted += digits[i];
        else if (i === 9) formatted += ' ' + digits[i];
        else if (i === 10) formatted += digits[i];
    }

    e.target.value = formatted;
});

const carInput = document.querySelector('.car');

carInput.addEventListener('input', (e) => {
  let value = e.target.value.toUpperCase();

  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–ª—é–±–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞)
  value = value.replace(/[^A-Z–ê-–Ø0-9]/gi, '');

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤
  value = value.substring(0, 25);

  e.target.value = value;
});












