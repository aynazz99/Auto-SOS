// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase ===
const firebaseConfig = {
  apiKey: "AIzaSyDtpFytzqGoE8w1cK_uekt3nnNGN4vV2Y8",
  authDomain: "auto-sos-8446f.firebaseapp.com",
  projectId: "auto-sos-8446f",
  storageBucket: "auto-sos-8446f.firebasestorage.app",
  messagingSenderId: "326847407685",
  appId: "1:326847407685:web:bfc1434124e1feed3ce52c",
  measurementId: "G-0YL7B1NZT1"
};

firebase.initializeApp(firebaseConfig);
const db = firebase.database();

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram ===
document.addEventListener("DOMContentLoaded", () => {
  const tg = window.Telegram?.WebApp;

  if (!tg || !tg.initDataUnsafe || !tg.initDataUnsafe.user) {
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram. –û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram.');
    return;
  }

  const tgUser = tg.initDataUnsafe.user;
  const tgId = tgUser.id;

  // === –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ Telegram –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ===
  const infoDiv = document.createElement('div');
  infoDiv.id = 'tg-info';
  infoDiv.style.cssText = `
    background: #f1f1f1;
    padding: 10px;
    margin: 10px 0;
    border-radius: 8px;
    font-family: monospace;
    white-space: pre-wrap;
  `;
  infoDiv.textContent = "üì¶ –î–∞–Ω–Ω—ã–µ Telegram:\n" + JSON.stringify(tgUser, null, 2);
  document.body.prepend(infoDiv);

  // === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
  db.ref('users/' + tgId).get().then(snapshot => {
    if (snapshot.exists()) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', snapshot.val());
      initApp(snapshot.val());
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      regPopup.classList.add('show');
    }
  }).catch(err => console.error(err));

  // === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
  regForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const formData = new FormData(regForm);
    const data = {
      person: formData.get('person'),
      car: formData.get('car'),
      carPlate: formData.get('carPlate'),
      phone: formData.get('phone'),
      tgUsername: tgUser.username || '',
      tgFirstName: tgUser.first_name || '',
      tgLastName: tgUser.last_name || '',
      tgLanguage: tgUser.language_code || '',
      tgId: tgId
    };

    db.ref('users/' + tgId).set(data)
      .then(() => {
        alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        regPopup.classList.remove('show');
        initApp(data);
      })
      .catch(err => console.error(err));
  });

  function initApp(userData) {
    console.log('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,', userData.person);
    window.location.href = '../page1/page1.html';
  }
});

// === –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π ===

// --- –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ ---
const carPlateInput = document.querySelector('.car-plate');
if (carPlateInput) {
  const cyrillicToLatin = {
    '–ê': 'A', '–í': 'B', '–°': 'C', '–ï': 'E',
    '–ö': 'K', '–ú': 'M', '–ù': 'H', '–û': 'O',
    '–†': 'P', '–¢': 'T', '–•': 'X'
  };

  carPlateInput.addEventListener('input', (e) => {
    let value = e.target.value.toUpperCase();
    value = value.replace(/[–ê–í–°–ï–ö–ú–ù–û–†–¢–•]/g, match => cyrillicToLatin[match]);
    value = value.replace(/[^A-Z0-9]/g, '');
    let formatted = '';

    for (let i = 0; i < value.length; i++) {
      if (i === 0 && /[A-Z]/.test(value[i])) formatted += value[i];
      else if (i >= 1 && i <= 3 && /[0-9]/.test(value[i])) formatted += value[i];
      else if (i >= 4 && i <= 5 && /[A-Z]/.test(value[i])) formatted += value[i];
      else if (i >= 6 && i <= 8 && /[0-9]/.test(value[i])) formatted += value[i];
    }

    let spaced = '';
    if (formatted.length > 0) spaced += formatted[0];
    if (formatted.length > 1) spaced += ' ' + formatted.substr(1, 3);
    if (formatted.length > 4) spaced += ' ' + formatted.substr(4, 2);
    if (formatted.length > 6) spaced += ' | ' + formatted.substr(6, 3);
    e.target.value = spaced.trim();
  });
}

// --- –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ ---
const nameInput = document.querySelector('.person-name');
if (nameInput) {
  nameInput.addEventListener('input', (e) => {
    let value = e.target.value;
    value = value.replace(/[^A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]/g, '');
    value = value.substring(0, 25);
    value = value.split(/[\s-]+/).map(word => {
      if (!word) return '';
      return word[0].toUpperCase() + word.slice(1);
    }).join(' ');
    e.target.value = value;
  });
}

// --- –§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
const phoneInput = document.querySelector('.phone');
if (phoneInput) {
  phoneInput.addEventListener('input', (e) => {
    let digits = e.target.value.replace(/\D/g, '');
    if (digits.length > 0) digits = '8' + digits.substr(1);
    digits = digits.substring(0, 11);
    let formatted = '';
    for (let i = 0; i < digits.length; i++) {
      if (i === 0) formatted += digits[i];
      else if (i === 1) formatted += ' (' + digits[i];
      else if (i === 2 || i === 3) formatted += digits[i];
      else if (i === 4) formatted += ') ' + digits[i];
      else if (i === 5 || i === 6) formatted += digits[i];
      else if (i === 7) formatted += ' ' + digits[i];
      else if (i === 8) formatted += digits[i];
      else if (i === 9) formatted += ' ' + digits[i];
      else if (i === 10) formatted += digits[i];
    }
    e.target.value = formatted;
  });
}

// --- –§–æ—Ä–º–∞—Ç –º–∞—Ä–∫–∏ –º–∞—à–∏–Ω—ã ---
const carInput = document.querySelector('.car');
if (carInput) {
  carInput.addEventListener('input', (e) => {
    let value = e.target.value.toUpperCase();
    value = value.replace(/[^A-Z–ê-–Ø0-9]/gi, '');
    value = value.substring(0, 25);
    e.target.value = value;
  });
}
