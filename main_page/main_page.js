document.addEventListener('DOMContentLoaded', async () => {
  //
  // === üîß –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –°–¢–ò–õ–ï–ô ===
  //
  const style = document.createElement('style');
  style.textContent = `
    #preloader {
      position: fixed;
      inset: 0;
      background: #0e0e0e;
      color: #fff;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 12px;
      z-index: 9999;
      font-family: monospace;
      transition: opacity 0.6s ease, visibility 0.6s ease;
    }
    #preloader.hide { opacity: 0; visibility: hidden; }
    .loader {
      width: 60px; height: 60px;
      border: 6px solid rgba(255,255,255,0.2);
      border-top-color: #00aaff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    @keyframes spin { to { transform: rotate(360deg); } }
    #loading-text { font-size: 1.1em; animation: pulse 2s infinite; }
    @keyframes pulse { 0%,100% {opacity:.5;} 50% {opacity:1;} }
    #debug-panel {
      width: 90%;
      max-width: 600px;
      background: rgba(255,255,255,0.1);
      border-radius: 10px;
      padding: 10px;
      text-align: left;
      overflow-y: auto;
      max-height: 55vh;
      color: #ddd;
      font-size: 0.85em;
    }
    #debug-panel h3 { margin: 0 0 5px 0; font-size: 1em; color: #00aaff; }
    #debug-output { white-space: pre-wrap; word-wrap: break-word; overflow-wrap: anywhere; }
    #copy-debug {
      margin-top: 6px;
      background: #00aaff;
      border: none;
      border-radius: 5px;
      color: #fff;
      padding: 6px 10px;
      cursor: pointer;
      font-size: 0.8em;
      transition: background 0.3s;
    }
    #copy-debug:hover { background: #0095dd; }
  `;
  document.head.appendChild(style);

  //
  // === üîß –°–û–ó–î–ê–ù–ò–ï –ü–†–ï–õ–û–ê–î–ï–†–ê –ò –î–ï–ë–ê–ì-–ü–ê–ù–ï–õ–ò ===
  //
  const preloader = document.createElement('div');
  preloader.id = 'preloader';
  preloader.innerHTML = `
    <div class="loader"></div>
    <p id="loading-text">–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...</p>
    <div id="debug-panel">
      <h3>üîß Debug Info</h3>
      <pre id="debug-output">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</pre>
      <button id="copy-debug">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å JSON</button>
    </div>
  `;
  document.body.appendChild(preloader);

  const loadingText = document.getElementById('loading-text');
  const debugOutput = document.getElementById('debug-output');
  const copyBtn = document.getElementById('copy-debug');

  copyBtn.addEventListener('click', () => {
    navigator.clipboard.writeText(debugOutput.textContent)
      .then(() => copyBtn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!')
      .catch(() => copyBtn.textContent = '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
    setTimeout(() => copyBtn.textContent = 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å JSON', 1500);
  });

  //
  // === üîß –£–¢–ò–õ–ò–¢–´ ===
  //
  const log = (msg, data = null) => {
    console.log(msg, data || '');
    debugOutput.textContent += `\n${msg}`;
    if (data) {
      try {
        debugOutput.textContent += `\n${JSON.stringify(data, null, 2)}\n`;
      } catch {
        debugOutput.textContent += `\n${data}\n`;
      }
    }
  };

  const updateStatus = (text) => {
    loadingText.textContent = text;
    log(`üåÄ ${text}`);
  };

  //
  // === üöÄ –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ===
  //
  try {
    updateStatus('–û–∂–∏–¥–∞–Ω–∏–µ Telegram WebApp...');

    // –ñ–¥—ë–º Telegram.WebApp –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    await new Promise((resolve) => {
      const checkTelegram = () => {
        if (window.Telegram && Telegram.WebApp) resolve();
        else requestAnimationFrame(checkTelegram);
      };
      checkTelegram();
    });

    Telegram.WebApp.ready();
    log('‚úÖ Telegram.WebApp –Ω–∞–π–¥–µ–Ω.');

    // –ñ–¥—ë–º initDataUnsafe
    updateStatus('–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram...');
    await new Promise((resolve) => {
      const checkUser = () => {
        if (Telegram.WebApp.initDataUnsafe) resolve();
        else requestAnimationFrame(checkUser);
      };
      checkUser();
    });

    const tg = Telegram.WebApp;
    const initData = tg.initData || '(–ø—É—Å—Ç–æ)';
    const initUnsafe = tg.initDataUnsafe || {};
    log('üì¶ initData:', initData);
    log('üì¶ initDataUnsafe:', initUnsafe);

    if (!initUnsafe.user) {
      updateStatus('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
      log('‚ö†Ô∏è Telegram.WebApp.initDataUnsafe.user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
      return;
    }

    const tgUser = initUnsafe.user;
    const tgId = tgUser.id;
    log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', tgUser);
    updateStatus('‚úÖ Telegram –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.');

    // === Firebase ===
    updateStatus('–ü–æ–¥–∫–ª—é—á–∞–µ–º Firebase...');
    const firebaseConfig = {
      apiKey: "AIzaSyDtpFytzqGoE8w1cK_uekt3nnNGN4vV2Y8",
      authDomain: "auto-sos-8446f.firebaseapp.com",
      projectId: "auto-sos-8446f",
      storageBucket: "auto-sos-8446f.firebasestorage.app",
      messagingSenderId: "326847407685",
      appId: "1:326847407685:web:bfc1434124e1feed3ce52c",
      measurementId: "G-0YL7B1NZT1"
    };
    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();
    log('üî• Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');

    updateStatus('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Firebase...');
    const snapshot = await db.ref('users/' + tgId).get();

    if (snapshot.exists()) {
      log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ Firebase:', snapshot.val());
      updateStatus('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ' + snapshot.val().person);
      await new Promise((r) => setTimeout(r, 800));
      preloader.classList.add('hide');
      initApp(snapshot.val());
    } else {
      log('‚ö†Ô∏è –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
      updateStatus('–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π...');
      await new Promise((r) => setTimeout(r, 800));
      preloader.classList.add('hide');
      document.getElementById('regPopup')?.classList.add('show');
    }

    function initApp(userData) {
      log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', userData);
      Telegram.WebApp.expand();
      window.location.href = '../page1/page1.html';
    }

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
    debugOutput.textContent += `\n‚ùå –û—à–∏–±–∫–∞: ${err.message}`;
    preloader.classList.add('hide');
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
  }
});













const carPlateInput = document.querySelector('.car-plate');

const cyrillicToLatin = {
  '–ê': 'A', '–í': 'B', '–°': 'C', '–ï': 'E',
  '–ö': 'K', '–ú': 'M', '–ù': 'H', '–û': 'O',
  '–†': 'P', '–¢': 'T', '–•': 'X'
};

carPlateInput.addEventListener('input', (e) => {
  let value = e.target.value.toUpperCase();

  // –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É
  value = value.replace(/[–ê–í–°–ï–ö–ú–ù–û–†–¢–•]/g, match => cyrillicToLatin[match]);

  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã)
  value = value.replace(/[^A-Z0-9]/g, '');

  let formatted = '';

  for (let i = 0; i < value.length; i++) {
    if (i === 0) {
      if (/[A-Z]/.test(value[i])) formatted += value[i];        // –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞
    } else if (i >= 1 && i <= 3) {
      if (/[0-9]/.test(value[i])) formatted += value[i];        // 3 —Ü–∏—Ñ—Ä—ã
    } else if (i >= 4 && i <= 5) {
      if (/[A-Z]/.test(value[i])) formatted += value[i];        // 2 –±—É–∫–≤—ã
    } else if (i >= 6 && i <= 8) {
      if (/[0-9]/.test(value[i])) formatted += value[i];        // 2-3 —Ü–∏—Ñ—Ä—ã (—Ä–µ–≥–∏–æ–Ω)
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
  let spaced = '';
  if (formatted.length > 0) spaced += formatted[0];                 // –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞
  if (formatted.length > 1) spaced += ' ' + formatted.substr(1, 3); // —Ç—Ä–∏ —Ü–∏—Ñ—Ä—ã
  if (formatted.length > 4) spaced += ' ' + formatted.substr(4, 2); // –¥–≤–µ –±—É–∫–≤—ã
  if (formatted.length > 6) spaced += ' | ' + formatted.substr(6, 3); // —Ä–µ–≥–∏–æ–Ω —á–µ—Ä–µ–∑ |

  e.target.value = spaced.trim();
});


const nameInput = document.querySelector('.person-name');

nameInput.addEventListener('input', (e) => {
    let value = e.target.value;

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    value = value.replace(/[^A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]/g, '');

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤
    value = value.substring(0, 25);

    // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π
    value = value.split(/[\s-]+/).map(word => {
        if (word.length === 0) return '';
        return word[0].toUpperCase() + word.slice(1);
    }).join(' ');

    e.target.value = value;
});


const phoneInput = document.querySelector('.phone');

phoneInput.addEventListener('input', (e) => {
    let digits = e.target.value.replace(/\D/g, ''); // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã

    // –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã –∫ 8
    if (/^[0-9]/.test(digits)) {
        digits = '8' + digits.substr(1);
    }


    digits = digits.substring(0, 11); // –º–∞–∫—Å–∏–º—É–º 11 —Ü–∏—Ñ—Ä

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    let formatted = '';
    for (let i = 0; i < digits.length; i++) {
        if (i === 0) formatted += digits[i];
        else if (i === 1) formatted += ' (' + digits[i];
        else if (i === 2 || i === 3) formatted += digits[i];
        else if (i === 4) formatted += ') ' + digits[i];
        else if (i === 5 || i === 6) formatted += digits[i];
        else if (i === 7) formatted += ' ' + digits[i];
        else if (i === 8) formatted += digits[i];
        else if (i === 9) formatted += ' ' + digits[i];
        else if (i === 10) formatted += digits[i];
    }

    e.target.value = formatted;
});

const carInput = document.querySelector('.car');

carInput.addEventListener('input', (e) => {
  let value = e.target.value.toUpperCase();

  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–ª—é–±–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞)
  value = value.replace(/[^A-Z–ê-–Ø0-9]/gi, '');

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤
  value = value.substring(0, 25);

  e.target.value = value;
});










